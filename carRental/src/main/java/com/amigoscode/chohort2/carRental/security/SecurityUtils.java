package com.amigoscode.chohort2.carRental.security;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.codec.binary.Hex;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.Optional;
import java.util.stream.Stream;

@Slf4j
public final class SecurityUtils {

    private SecurityUtils() {

    }


    public static Optional<String> getCurrentUsernameOpt() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        return Optional
                .ofNullable(authentication)
                .map(Authentication::getPrincipal)
                .map(principal -> {
                    if (principal instanceof UserDetails ud) {
                        return ud.getUsername();
                    }
                    if (principal instanceof String username) {
                        return username;
                    }
                    return null;
                });
    }


    public static String getCurrentUsername() {
        return getCurrentUsernameOpt()
                .orElseThrow(() -> new AccessDeniedException(HttpStatus.UNAUTHORIZED.getReasonPhrase()));
    }

    public static boolean isCurrentUserInRole(String role) {
        return getCurrentUserAuthorities()
                .map(grantedRole -> grantedRole.equals(role))
                .filter(hasTheAuthority -> hasTheAuthority)
                .findFirst()
                .orElse(false);

    }

    public static boolean isCurrentUserInAnyRole(String... roles) {
        for (String role : roles) {
            if (isCurrentUserInRole(role)) {
                return true;
            }
        }
        return false;
    }

    private static Stream<String> getCurrentUserAuthorities() {
        return SecurityContextHolder
                .getContext()
                .getAuthentication()
                .getAuthorities()
                .stream()
                .map(GrantedAuthority::getAuthority);

    }

    public static String maskEmail(String email) {
        return email.replaceAll("(?<=.{1}).(?=[^@]*?@)", "*");
    }

    /**
     * Creates a hash based on input string by using Secure Hash Algorithm 512 (SHA-256).
     * <p> Obfuscation may be useful, when sensitive data needs to be logged without exposing its content in plain text,
     * while giving a chance to search for logs by the same hash digest, or looking up logs by passing the known value in
     * plain text to the same obfuscation method. Obfuscation can be used in conjunction with lombok ToString
     * preprocessor as following:
     * <pre class="code">
     * &#64;ToString
     * public class LoginVM {
     *     private String username;
     *     private String password;
     *     &#64;ToString.Include
     *     private String password(){
     *         return SecurityUtils.obfuscateString(password);
     *     }
     * }
     * </pre>
     * <p>The code above will lead to the following autogenerated toString method:
     * <pre class="code">
     * public String toString() {
     *      String var10000 = this.getUsername();
     *      return "LoginVM(username=" + var10000 + ", password=" + this.password() + ")";
     *  }
     *  </pre>
     * @param data takes an object of type String that is a hash created of.
     * @return a string which represents a hashed data.
     * @since 0.0.1
     * */

    public static String obfuscateString(Object data) {
        if(data instanceof String target){
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                byte []fingerPrint = digest.digest(target.getBytes(StandardCharsets.UTF_8));
                return new String(Hex.encodeHex(fingerPrint));
            }
            catch (Exception e){
                log.error("Hashing failed!");
            }
        }
        log.error("Obfuscation of data-type {} is not implemented. Hashing failed. Returned value: data.toString().",data.getClass().toString());
        return data.toString();

    }


}
